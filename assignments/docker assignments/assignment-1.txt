1. Install Docker, either on your native OS or on a VM. Make sure it runs. Type "docker -v" to check if it's installed.
--Docker version 20.10.14, build a224086


2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub
--docker pull nginx


3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.
-- docker images


4. Find out the "Full" ImageId of the image that you pulled and write it below.
--fa5269854a5e615e51a72b17ad3fd1e01268f278a6684c8ed3c5f0cdce3f230b


5. Create a container of your image 
--docker container run nginx


6. List all the running containers
--docker container ps


7. List all the running and stopped containers
--docker container ps -a


8. Find out the "Full" containerId of the container and write it below.
--02b0b7f5204a20048c006ea7af6eb37e31b0a0642639e8fc055d8e0b06069116


9. Find out how many image layers are used to build this image.
--14
10. Get the Apache Tomcat 7 server image from the docker hub.
--docker pull tomcat:7


11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat.
--docker run --name mytomcat tomcat:7


12. Find out what is the IP Address of the Apache Tomcat Container that it is running on
--172.17.0.2


13. Which Port it is using?
--8080/tcp


14. Try to access the Tomcat's home page from your machine/vm.
--curl localhost:8080


15. What is the disk size of Apache Tomcat image?
--533mb


16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
JAVA_VERSION=8u292
CATALINA_HOME=/usr/local/tomcat


17. Find out which port is exposed for tomcat?
--docker inspect tomcat

host port: 8080 and 
container port : 50000


18. Run multiple conntainers of tomcat on different port and access it's home page.
--

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
--docker pull ubuntu:18.04
--docker pull ubuntu:rolling


20. Run the container of ubuntu in attached mode.
--docker run ubuntu:18.04


21. Run the container of another ubuntu in detached mode.
--docker run -d ubuntu:18.04

22. Check how many ubuntu containers are running and stopped
--docker ps -a


23. Is the tomcat container running? If no, start one.
--docker container run tomcat

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
--docker logs


25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
--docker run -d ubuntu:18.04


26. Login as root user in ubuntu container
27. Create a file with any name in root directory
--touch subham


28. Install software of your choice in ubuntu container using "apt-get install"
--apt get install python


29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
30. Check if the ubuntu container is running.
31. Create a new ubuntu container out of the same image as that previous container in attached mode.
--docker run -it ubuntu


32. Login as a root user
33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
--docker kil


34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
35. Create an Image out of the existing container.
--docker commit
36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
--docker kill tomcat


38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
--FROM tomcat:7

ADD index.html /usr/local/tomcat/webapps/

EXPOSE 8080

CMD [“page.sh”, “run”]

docker build -t myapp .

docker run -p 80:8080 mywebapp

http://localhost


39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a
2. -f
3. -q
--docker images -a    : show all iamges
used to show default hides intermediate images

docker images -f    :filter output based on condition provided
used to filter(based on size,time etc)

docker images -q    :only show image id
used when we need only image id